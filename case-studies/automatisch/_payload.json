[{"data":1,"prerenderedAt":103},["Reactive",2],{"content-query-GYMjB1qhMr":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"body":9,"_type":98,"_id":99,"_source":100,"_file":101,"_extension":102},"/case-studies/automatisch","case-studies",false,"","Automatisch",{"type":10,"children":11,"toc":91},"root",[12,21,27,33,38,43,48,53,59,64,80,86],{"type":13,"tag":14,"props":15,"children":17},"element","h2",{"id":16},"about-automatisch",[18],{"type":19,"value":20},"text","About Automatisch",{"type":13,"tag":22,"props":23,"children":24},"p",{},[25],{"type":19,"value":26},"Automatisch is an open source Zapier alternative built upon a variety of node libraries. Their product already has several dozen integrations with other platforms, and are in progress with many more. Their QA needs were based on building automated smoke tests using playwright, finding and reporting bugs, and ensuring their CI pipeline supports features from both the community edition and enterprise edition.",{"type":13,"tag":14,"props":28,"children":30},{"id":29},"testing-needs",[31],{"type":19,"value":32},"Testing Needs",{"type":13,"tag":22,"props":34,"children":35},{},[36],{"type":19,"value":37},"While working with Automatisch, we wrote up a number of tests covering a wide net over the application use cases. This includes writing tests for the administration of users and roles, permissions, and core application functionality.",{"type":13,"tag":22,"props":39,"children":40},{},[41],{"type":19,"value":42},"Testing user administration can be error prone because of hard to find bugs. Our approach was to take a serial approach covering a wide variety of use cases and edge cases, ensuring that app functionality conformed with the actual product requirements. In addition we tested various permissions cases, finding edge case bugs in the process, and writing test code ensuring these problems don't find their way back into the code at a later date.",{"type":13,"tag":22,"props":44,"children":45},{},[46],{"type":19,"value":47},"While writing our tests we made sure to follow best practices such as integrating test ID's into application components, ensuring the tests were robust to future redesigns and component movements. Moreover, we made sure our tests were easy to read and followed a testing strategy with short quick to parse steps. This way a future developer could look through a test and instantly grok the 10 lines or less of test code and understand what kind of actions the test code is making. Transparency is key for maintainable tests.",{"type":13,"tag":22,"props":49,"children":50},{},[51],{"type":19,"value":52},"In addition to this work, we also refactored and cleaned up previous tests into more manageable and readable tests which follow best practices. Also, we helped guide current developers towards writing test code following best practices.",{"type":13,"tag":14,"props":54,"children":56},{"id":55},"bug-finding",[57],{"type":19,"value":58},"Bug Finding",{"type":13,"tag":22,"props":60,"children":61},{},[62],{"type":19,"value":63},"During the test development process, we ran into several bugs and rough edges in the product. After finding a potential bug, we pinged Automatisch if the issue was known, and then submitted a public issue on github. These issues were well formatted and generally included an overview of the bug or issue, along with screenshots, steps for reproducing the bug, and finally recommendations for improvement, if they were desired.",{"type":13,"tag":22,"props":65,"children":66},{},[67,69,78],{"type":19,"value":68},"For an example, ",{"type":13,"tag":70,"props":71,"children":75},"a",{"href":72,"rel":73},"https://github.com/automatisch/automatisch/issues/1370",[74],"nofollow",[76],{"type":19,"value":77},"see here",{"type":19,"value":79},", where we found a host of UX/UI issues if a user only has certain permissions and attempts some unauthorized actions.",{"type":13,"tag":14,"props":81,"children":83},{"id":82},"ci-pipeline",[84],{"type":19,"value":85},"CI Pipeline",{"type":13,"tag":22,"props":87,"children":88},{},[89],{"type":19,"value":90},"Automatisch's product supports a wide variety of users, from open source self-hosted users to enterprises, their product supports a wide gamut of use cases. Because of this, ensuring the product correctly tests all enterprise features during development, we helped guide them while building their CI pipeline to all potential use cases. This means the tests are run against an environment which has all possible features available.",{"title":7,"searchDepth":92,"depth":92,"links":93},2,[94,95,96,97],{"id":16,"depth":92,"text":20},{"id":29,"depth":92,"text":32},{"id":55,"depth":92,"text":58},{"id":82,"depth":92,"text":85},"markdown","content:case-studies:automatisch.md","content","case-studies/automatisch.md","md",1708131904454]