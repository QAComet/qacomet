{"_path":"/blog/shifting-left-qa-revolution","_dir":"blog","_draft":false,"_partial":false,"_locale":"","title":"\"Shift-Left\" QA: accelerate your SaaS product development","description":"","subtitle":"Improve your software development velocity with \"Shift-Left\" QA.","breadcrumbs":[{"name":"Blog","path":"/blog/"},{"name":"\"Shifting-Left\": the agile QA methodology for SaaS startups","path":"/blog/shifting-left-the-agile-qa-methodology/"}],"link":"/blog/shifting-left-the-agile-qa-methodology/","created":{"string":"July 1, 2024","valueOf":1719813600000,"month":"July","day":1,"year":2024},"shortDescription":"Discover how \"Shift-Left\" QA helps SaaS startups improve product development velocity, reduce costs, and gain a competitive edge.","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"One of the strongest correlations we uncovered linked top financial performers and companies that said they could break down functional silos and integrate designers with other functions. â€” "},{"type":"element","tag":"a","props":{"href":"#references"},"children":[{"type":"text","value":"McKinsey Design"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In today's high-interest-rate environment, SaaS startups seek ways to build great products, reduce costs, gain an advantage over competitors, and ensure their startup survives the economic turbulence. Building a startup is challenging, but with these additional constraints, founders struggle even more."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"One management strategy for approaching these problems is \"shift-left\" quality assurance (QA). Essentially this is breaking down the traditional role of QA as the gatekeeper before release to earlier parts of the product development process. It even includes having QA look at products during their design and wireframing stages, and finding usability problems before the first line of code is written. This agile methodology transforms how SaaS products are developed, tested, and delivered to the market. Let's dive into how \"Shifting-Left\" QA helps SaaS startups improve their product development velocity, lower costs, and improve customer satisfaction."}]},{"type":"element","tag":"h2","props":{"id":"what-is-shift-left-qa"},"children":[{"type":"text","value":"What is \"Shift-Left\" QA?"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"\"Shift-Left\" QA"}]},{"type":"text","value":" is an agile management approach that integrates quality assurance earlier in the product development cycle, rather than treating it as a siloed, end-stage process."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Although the definition of \"Shift-Left\" QA is simple, its implications are far-reaching because it impacts every other part of the product development cycle. If you have someone QA your wireframes, designs, or even product workflows, you will have fewer bugs in production, clearer requirements for software engineers, and a more effective product development cycle."}]},{"type":"element","tag":"h2","props":{"id":"how-qa-was-siloed-in-the-past"},"children":[{"type":"text","value":"How QA was siloed in the past"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's unpack this a little more by considering what QA looked like before \"Shifting-Left\" began to take hold. At the start of your product development cycle, you would have an idea and let your designers mock up a solution. This would be sent to your developers to code and once the feature was shaping up and looking close to release, you would now have your QA team work on these updates and find any problems with it. Now, if you have a general workflow bug that needs to be resolved at the design stage, you're going to have to make changes all along the product development cycle. Your designers will need to fix their mockups, then developers will need to change their code to conform to these changes. At this point, there's increased pressure to release so it's more likely your developers will introduce new bugs from migrating their old code to the new changes."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"QA in waterfall managed projects","src":"/img/blog/shifting-left/old_diagram.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"All this back and forth from QA to the beginning of the product development cycle means more development time, changing requirements, and a slower release process. Going through this process multiple times is time-consuming, and expensive, and you'll likely only be able to partially finish the feature before release, giving your customers a subpar experience ("},{"type":"element","tag":"a","props":{"href":"#references"},"children":[{"type":"text","value":"McKinsey Digital"}]},{"type":"text","value":"). At this point, your product pipeline has incurred a lot of waste just because QA was siloed off towards the end of the software development pipeline."}]},{"type":"element","tag":"h3","props":{"id":"the-opposing-mindsets-of-building-features-and-doing-qa"},"children":[{"type":"text","value":"The opposing mindsets of building features and doing QA"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now you may think this kind of back and forth can be dealt with by each of the teams before QA takes a look at your new feature, but effective QA is a fundamentally different mindset than one when building something new. Creating new functionality is fundamentally generative: you are thinking additively about your project, gathering customer requirements, and distilling them into requirements for your development team."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"QA, on the other hand, is fundamentally adversarial. If you are doing QA work for a product, you are taking apart its essence and looking for flaws. These two mindsets are opposed to one another, they are complete opposites. If you're context switching back and forth between these opposing mindsets it can quickly get exhausting. You're more likely to lose the forest from the trees and develop a product or feature that isn't as robust or well-oiled as you would like."}]},{"type":"element","tag":"h2","props":{"id":"how-shifting-left-creates-an-agile-sdlc"},"children":[{"type":"text","value":"How \"Shifting-Left\" creates an agile SDLC"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The fundamental change with shifting left is breaking down the barrier of having QA as an end-time process and integrating it into each step of the SDLC. This means your QA team collaborates with the rest of the folks in the SDLC creating a more dynamic work environment. They can keep customer requirements in mind at each step of the development process, helping your team output software better in tune with customer needs. By shifting left your QA, you've converted QA into an agile workflow for new software."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"Shift-Left QA in agile managed projects","src":"/img/blog/shifting-left/new_diagram.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\"Shifting-Left\" is just taking the QA process and turning it into a more natural back-and-forth at each step of the SDLC. Now while you're planning and designing new features, you have someone to bounce ideas off of who can find inefficiencies or other defects before developers are writing code. Additionally, your software development team benefits because the QA team has the requirements from the planning and design stages, and they can start writing automated tests. With this workflow, you can now have your developers and QA working synchronously. Not only that, QA can now find implementation bugs even before the developers have finished writing all of their code because of the early development of automated tests. If you have a test automation suite integrated into a continuous integration system, your developers can automatically test their code and catch bugs while implementing the product. This lets developers catch bugs earlier on in the development process and helps your company launch a more robust product because of increased test coverage earlier on in the SDLC."}]},{"type":"element","tag":"h2","props":{"id":"how-shifting-left-helps-your-startup-innovate"},"children":[{"type":"text","value":"How \"Shifting-Left\" helps your startup innovate"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now that we have an in-depth understanding of \"Shift-Left\" QA, let's speak more about the benefits. As we've seen there will be earlier detection of bugs in your product because your QA team is now doing their work right at the beginning of the SDLC. This means that designed workflows will be much more robust before your developers write their first line of code. This saves an enormous amount of time and money, keeping your startup lean."}]},{"type":"element","tag":"h3","props":{"id":"shift-left-qa-enhances-collaboration"},"children":[{"type":"text","value":"\"Shift-Left\" QA enhances collaboration"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Another massive benefit is your team will be better integrated because of the enhanced collaboration. You now have a team transporting product knowledge across the development pipeline. Because you have QA working alongside your developers and they've worked arduously with the design and planning team, they can now share this knowledge with the development team and keep them in sync with how the features should be implemented. Instead of playing a game of telephone for understanding requirements, you have a set of experts working alongside the folks implementing your software. This enhanced collaboration lets your product development teams work with greater synchronicity."}]},{"type":"element","tag":"h3","props":{"id":"shift-left-qa-helps-make-products-more-robust"},"children":[{"type":"text","value":"\"Shift-Left\" QA helps make products more robust"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"After the planning and design phases, your QA team will work alongside your developers implementing automated tests while they write new features. This contrasts with the older siloed methodology where automated tests were more of an afterthought. Instead, you have automated checks ensuring all requirements are met by your software development team. This means your developers have automated feedback from the test scripts, helping them implement more robust software. This rapid feedback loop lets them iterate faster and improve the product with much greater velocity."}]},{"type":"element","tag":"h3","props":{"id":"shift-left-qa-improves-product-development-velocity"},"children":[{"type":"text","value":"\"Shift-Left\" QA improves product development velocity"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Practitest found that 73% of respondants said the adoption of iterative development increased the release of features and functionalities, and improved overall testing levels. "},{"type":"element","tag":"a","props":{"href":"#references"},"children":[{"type":"text","value":"Practitest"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The time savings now let your QA team increase the test coverage of your products since they aren't expected to spend a week or two testing out your product before release. This removes unneeded pressure and stress from your QA team, helping improve their productivity. It's much harder to write thoughtful tests while a section of your company anxiously awaits the results from your testing sprint. By distributing QA work alongside your development teams you've given your QA team much more time to focus on testing the features at hand."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This synchronous workflow of having your QA team work alongside developers has additional benefits as well. For instance, your QA team will be spending less time going back to previously released features to find bugs. This helps them because they won't have to hop between different areas of your project, constantly having to context switch. Another benefit of having your QA team work with your developers is they can collaborate on finer-grained edge cases. Maybe your developers spot some edge cases that should be automatically tested to ensure future changes don't break the product that is most clear if you're working on the product's code. Highly technical bugs can be challenging to spot, which would require large amounts of time and effort in the future. When your developers and QA collaborate during development their synergy helps your product stay robust over time as the underlying codebase changes."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As your QA team works through more release cycles, your project will gain more automated tests. Now when your developers are updating code or adding new features, they have a layer of assurance their changes aren't breaking previously working features. Preventing these regressions is essential for any functional organization."}]},{"type":"element","tag":"h2","props":{"id":"consider-shift-left-qa-for-your-next-project"},"children":[{"type":"text","value":"Consider \"Shift-Left\" QA for your next project"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's recap the essential bits of \"Shift-Left\" QA. When a software team decides to \"Shift-Left\" their QA, they have integrated QA as part of each step within the software development lifecycle (SDLC). The benefits are multi-fold and would help most startups innovate faster and reduce costs. These benefits include:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Lower costs"}]},{"type":"text","value":": Instead of having QA notice problems with your product or feature after implementing your original plans, you've now allowed QA to be part of the planning and design phases, making it easier to spot problems early on."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Improved time-to-market"}]},{"type":"text","value":": \"Shift-Left\" QA lets your company have a faster product and feature release pipeline making it easier to grow faster. \"Shifting-Left\" helps you cut down on wasted development time by spotting defects early on in the product development cycle and reducing the number of changes developers have to implement before releasing a product or feature."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Better products, happier customers, and reduced churn"}]},{"type":"text","value":": Another benefit of turning QA into a continuous process is it lets your QA team implement tests much earlier on in the SDLC. They can now take the requirements developers are using and begin implementing automated tests for the features being developed. This reduces bugs entering into production leading to higher quality products and less frustration for your customers."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"With your next software project consider trying out a \"Shift-Left\" QA approach and see how well your team performs."}]},{"type":"element","tag":"h2","props":{"id":"references"},"children":[{"type":"text","value":"References"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"[McKinsey Digital] "},{"type":"element","tag":"a","props":{"href":"https://www.mckinsey.com/capabilities/mckinsey-digital/our-insights/delivering-large-scale-it-projects-on-time-on-budget-and-on-value","rel":["nofollow"]},"children":[{"type":"text","value":"Delivering large-scale IT projects on time, on budget, and on value"}]},{"type":"text","value":". McKinsey."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"[McKinsey Design] "},{"type":"element","tag":"a","props":{"href":"https://www.mckinsey.com/capabilities/mckinsey-design/our-insights/the-business-value-of-design","rel":["nofollow"]},"children":[{"type":"text","value":"The business value of design"}]},{"type":"text","value":". McKinsey."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"[Practitest] "},{"type":"element","tag":"a","props":{"href":"https://www.practitest.com/state-of-testing/","rel":["nofollow"]},"children":[{"type":"text","value":"The 2024 State of Testingâ„¢ Report"}]},{"type":"text","value":". Practitest."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"[TestRail] "},{"type":"element","tag":"a","props":{"href":"https://www.testrail.com/blog/agile-qa-best-practices/","rel":["nofollow"]},"children":[{"type":"text","value":"Agile QA Process: Principles, Steps, and Best Practices"}]},{"type":"text","value":". TestRail."}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"what-is-shift-left-qa","depth":2,"text":"What is \"Shift-Left\" QA?"},{"id":"how-qa-was-siloed-in-the-past","depth":2,"text":"How QA was siloed in the past","children":[{"id":"the-opposing-mindsets-of-building-features-and-doing-qa","depth":3,"text":"The opposing mindsets of building features and doing QA"}]},{"id":"how-shifting-left-creates-an-agile-sdlc","depth":2,"text":"How \"Shifting-Left\" creates an agile SDLC"},{"id":"how-shifting-left-helps-your-startup-innovate","depth":2,"text":"How \"Shifting-Left\" helps your startup innovate","children":[{"id":"shift-left-qa-enhances-collaboration","depth":3,"text":"\"Shift-Left\" QA enhances collaboration"},{"id":"shift-left-qa-helps-make-products-more-robust","depth":3,"text":"\"Shift-Left\" QA helps make products more robust"},{"id":"shift-left-qa-improves-product-development-velocity","depth":3,"text":"\"Shift-Left\" QA improves product development velocity"}]},{"id":"consider-shift-left-qa-for-your-next-project","depth":2,"text":"Consider \"Shift-Left\" QA for your next project"},{"id":"references","depth":2,"text":"References"}]}},"_type":"markdown","_id":"content:blog:shifting-left-qa-revolution.md","_source":"content","_file":"blog/shifting-left-qa-revolution.md","_extension":"md"}