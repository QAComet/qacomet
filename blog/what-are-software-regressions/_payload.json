[{"data":1,"prerenderedAt":397},["ShallowReactive",2],{"blog-post-/blog/what-are-software-regressions":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"subtitle":10,"breadcrumbs":11,"link":16,"created":17,"shortDescription":23,"body":24,"_type":392,"_id":393,"_source":394,"_file":395,"_extension":396},"/blog/what-are-software-regressions","blog",false,"","What are software regressions?","We all know managing software projects is challenging and one of the most common issues a development team faces besides implementing new features is dealing with bugs. Now bugs come in many shapes and sizes and should be reduced by as much as possible before new code reaches production. One problem every team faces is software regressions.","Prevent your software from decaying with automated testing and essential KPIs.",[12,15],{"name":13,"path":14},"Blog","/blog/",{"name":8,"path":16},"/blog/what-are-software-regressions/",{"string":18,"valueOf":19,"month":20,"day":21,"year":22},"July 23, 2024",1721714400000,"July",23,2024,"Software regressions are the bane of every developer. Ensuring new changes or updates aren't breaking your project is essential for any successful software project.",{"type":25,"children":26,"toc":372},"root",[27,34,40,55,60,74,94,99,106,111,116,122,127,132,138,143,149,157,162,167,190,196,204,209,215,223,228,234,242,247,253,258,264,272,277,283,291,296,302,307,315,320,326],{"type":28,"tag":29,"props":30,"children":31},"element","p",{},[32],{"type":33,"value":9},"text",{"type":28,"tag":35,"props":36,"children":38},"h2",{"id":37},"what-are-software-regressions",[39],{"type":33,"value":8},{"type":28,"tag":41,"props":42,"children":43},"blockquote",{},[44],{"type":28,"tag":29,"props":45,"children":46},{},[47,53],{"type":28,"tag":48,"props":49,"children":50},"strong",{},[51],{"type":33,"value":52},"Software regressions",{"type":33,"value":54}," are a type of bug where a previously working feature breaks.",{"type":28,"tag":29,"props":56,"children":57},{},[58],{"type":33,"value":59},"There are several ways regressions enter into a software product. One of them is when a previously unknown or inaccessible bug enters into production because of a code change. This can happen when a codebase is updated and some function is used in a way the original author didn't intend for it to be used. You will often see these kinds of regressions happen in utility functions since they may have been built with a single purpose and many undocumented assumptions.",{"type":28,"tag":29,"props":61,"children":62},{},[63,65,72],{"type":33,"value":64},"Another way software regressions creep into production is when code changes are made without understanding the original intention for its implementation. This is a classic example of [",{"type":28,"tag":66,"props":67,"children":69},"a",{"href":68},"#references",[70],{"type":33,"value":71},"Chesterton's Fence",{"type":33,"value":73},"]. Many experienced developers will use defensive programming to mitigate these kinds of problems. Some of these techniques include:",{"type":28,"tag":75,"props":76,"children":77},"ul",{},[78,84,89],{"type":28,"tag":79,"props":80,"children":81},"li",{},[82],{"type":33,"value":83},"Adding comments in the code about assumptions made while writing core functionality.",{"type":28,"tag":79,"props":85,"children":86},{},[87],{"type":33,"value":88},"Making additional checks, such as null pointer checks, when a piece of code may be re-used in unknown ways in the future.",{"type":28,"tag":79,"props":90,"children":91},{},[92],{"type":33,"value":93},"Using a robust typing system.",{"type":28,"tag":29,"props":95,"children":96},{},[97],{"type":33,"value":98},"but the list goes on. Even if developers are doing a great job and following best practices, it's still challenging to find every defect. Instead, it is ultimately the job of the QA team to mitigate against regressions from entering into production by developing automated checks or manually testing edge cases developers wouldn't have thought of.",{"type":28,"tag":100,"props":101,"children":103},"h3",{"id":102},"how-regressions-impact-ux",[104],{"type":33,"value":105},"How regressions impact UX",{"type":28,"tag":29,"props":107,"children":108},{},[109],{"type":33,"value":110},"Besides regressions being frustrating for your development team, they are even more frustrating for users. This is because they typically expect their workflows to always function correctly. When you open up Google Docs and something isn't working, do you instinctively blame your internet connection, do you blame Google, or do you blame the browser itself? I'm guessing you'd blame your connection because it's generally less reliable than these other products.",{"type":28,"tag":29,"props":112,"children":113},{},[114],{"type":33,"value":115},"Now imagine navigating through a complex multi-step workflow only to find out there's a critical juncture that's broken near the end. If your users cannot recover from the bug they've encountered they'll be left frustrated and looking for alternative paths to complete their work. Not only that, they will have wasted part of their workday on something they will have to redo later. This kind of waste adds up and certainly factors into spending decisions for many companies.",{"type":28,"tag":35,"props":117,"children":119},{"id":118},"how-can-i-manage-regressions",[120],{"type":33,"value":121},"How can I manage regressions?",{"type":28,"tag":29,"props":123,"children":124},{},[125],{"type":33,"value":126},"Managing regressions is a multifaceted process because many vectors may cause them. One of the most effective tools for dealing with regressions is by writing automated tests called regression tests. These let your developers not have to keep a list of previously encountered bugs in the back of their minds while writing code since these problems can be taken into account by a testing suite.",{"type":28,"tag":29,"props":128,"children":129},{},[130],{"type":33,"value":131},"Besides automated testing, you can keep track of the general performance around regressions by using the correct KPIs.",{"type":28,"tag":35,"props":133,"children":135},{"id":134},"core-regression-kpis",[136],{"type":33,"value":137},"Core regression KPIs",{"type":28,"tag":29,"props":139,"children":140},{},[141],{"type":33,"value":142},"Here is a list of core KPIs you can use to get a picture of how regressions are impacting your project.",{"type":28,"tag":100,"props":144,"children":146},{"id":145},"bug-repopen-rate",[147],{"type":33,"value":148},"Bug Repopen Rate",{"type":28,"tag":41,"props":150,"children":151},{},[152],{"type":28,"tag":29,"props":153,"children":154},{},[155],{"type":33,"value":156},"(Count of bugs being reopened) / (Total number of bugs resolved) * 100%",{"type":28,"tag":29,"props":158,"children":159},{},[160],{"type":33,"value":161},"One of the most direct measurements of regressions in software projects is the bug reopen rate. This is because it measures how often reported bugs are being reopened as issues. Having a high bug reopen rate indicates that your team is spending more time fixing problems they previously thought were finished and less on implementing new features.",{"type":28,"tag":29,"props":163,"children":164},{},[165],{"type":33,"value":166},"There are multiple factors that can cause a high bug reopen rate, including",{"type":28,"tag":75,"props":168,"children":169},{},[170,175,180,185],{"type":28,"tag":79,"props":171,"children":172},{},[173],{"type":33,"value":174},"Your software isn't effectively tested when a bug is labeled as fixed, so the bug may still exist in cases that weren't tested.",{"type":28,"tag":79,"props":176,"children":177},{},[178],{"type":33,"value":179},"Code changes could be consistently breaking previously working functionality.",{"type":28,"tag":79,"props":181,"children":182},{},[183],{"type":33,"value":184},"There may be a large amount of interdependency in your codebase. This means if you update one part of your code, it could impact functionality in many other parts of your codebase.",{"type":28,"tag":79,"props":186,"children":187},{},[188],{"type":33,"value":189},"Unclear requirements can cause your developers to implement the wrong functionality.",{"type":28,"tag":100,"props":191,"children":193},{"id":192},"planned-vs-executed-testing-progress",[194],{"type":33,"value":195},"Planned vs Executed Testing Progress",{"type":28,"tag":41,"props":197,"children":198},{},[199],{"type":28,"tag":29,"props":200,"children":201},{},[202],{"type":33,"value":203},"(Number of executed tests) / (Number of planned tests) * 100%",{"type":28,"tag":29,"props":205,"children":206},{},[207],{"type":33,"value":208},"If your team is unable to execute every planned test before releasing software into production, the likelihood of new regressions increases. This metric helps you determine how optimized your development workflow is for catching problems before release. A low score indicates your team is unable to perform all testing in a timely manner.",{"type":28,"tag":100,"props":210,"children":212},{"id":211},"defect-density",[213],{"type":33,"value":214},"Defect Density",{"type":28,"tag":41,"props":216,"children":217},{},[218],{"type":28,"tag":29,"props":219,"children":220},{},[221],{"type":33,"value":222},"Create a heatmap by partitioning your project into different categories or components and count the number of defects with respect to their severity.",{"type":28,"tag":29,"props":224,"children":225},{},[226],{"type":33,"value":227},"Figuring out the defect density in your project helps you understand where the main problems align. For example, if you manage a large software project split up into several components, it's useful to measure which components are giving the most problems. This helps prioritize which areas need improvement and gives you a better idea of where to allocate more testing resources.",{"type":28,"tag":100,"props":229,"children":231},{"id":230},"risk-management-efficiency",[232],{"type":33,"value":233},"Risk Management Efficiency",{"type":28,"tag":41,"props":235,"children":236},{},[237],{"type":28,"tag":29,"props":238,"children":239},{},[240],{"type":33,"value":241},"(The number of high-severity bugs in high-risk areas)/(Total number of severe bugs) * 100%",{"type":28,"tag":29,"props":243,"children":244},{},[245],{"type":33,"value":246},"Another area you should consider when dealing with regressions is understanding how they are impacting critical areas of your project. For example, if you manage personal identifying information, such as in a FinTech or HealthTech product, then you should keep track of how many bugs exist within risky sections of your product. This way you can see if the bugs with the highest potential for upending your startup are being dealt with effectively.",{"type":28,"tag":35,"props":248,"children":250},{"id":249},"customer-oriented-regression-kpis",[251],{"type":33,"value":252},"Customer-oriented regression KPIs",{"type":28,"tag":29,"props":254,"children":255},{},[256],{"type":33,"value":257},"The other side of understanding regressions is measuring how they could be impacting customers.",{"type":28,"tag":100,"props":259,"children":261},{"id":260},"escaping-defects-rate",[262],{"type":33,"value":263},"Escaping Defects Rate",{"type":28,"tag":41,"props":265,"children":266},{},[267],{"type":28,"tag":29,"props":268,"children":269},{},[270],{"type":33,"value":271},"(Number of Defects Found in Production) / (Total Number of Defects) * 100%",{"type":28,"tag":29,"props":273,"children":274},{},[275],{"type":33,"value":276},"An easy way to measure the customer-facing impact of bugs is by looking at the percentage of bugs entering production. By keeping track of this value your organization will be better informed on how well its software development cycle can find and remove bugs before releasing to production.",{"type":28,"tag":100,"props":278,"children":280},{"id":279},"post-release-support-tickets",[281],{"type":33,"value":282},"Post-Release Support Tickets",{"type":28,"tag":41,"props":284,"children":285},{},[286],{"type":28,"tag":29,"props":287,"children":288},{},[289],{"type":33,"value":290},"Track the number of support tickets post-release for a new version of your software.",{"type":28,"tag":29,"props":292,"children":293},{},[294],{"type":33,"value":295},"Another way to measure your product development performance is by measuring the number of support tickets created after a new release. This can help give insight into how updates to QA processes are impacting your customer experience. If QA is being tightly integrated into your development process and post-release support tickets are trending downward, then your process changes are working as intended.",{"type":28,"tag":100,"props":297,"children":299},{"id":298},"net-promoter-score",[300],{"type":33,"value":301},"Net Promoter Score",{"type":28,"tag":29,"props":303,"children":304},{},[305],{"type":33,"value":306},"If you survey your users asking how likely they are to recommend your product to a friend, on a 0-10 scale, then",{"type":28,"tag":41,"props":308,"children":309},{},[310],{"type":28,"tag":29,"props":311,"children":312},{},[313],{"type":33,"value":314},"NPS = %(Users giving an 8-10) - %(Users giving a 0-5)",{"type":28,"tag":29,"props":316,"children":317},{},[318],{"type":33,"value":319},"One of the most effective metrics for measuring customer satisfaction is the Net Promoter Score (NPS). By tracking this value you are understanding how likely your customers will evangelize your product, making it more likely for their friends and colleagues to convert. If you see your NPS is low and your QA metrics are doing poorly, it's probably time to start investing more time and effort into effective QA processes.",{"type":28,"tag":35,"props":321,"children":323},{"id":322},"references",[324],{"type":33,"value":325},"References",{"type":28,"tag":75,"props":327,"children":328},{},[329,344,358],{"type":28,"tag":79,"props":330,"children":331},{},[332,334,342],{"type":33,"value":333},"[Chesterton's Fence]. ",{"type":28,"tag":66,"props":335,"children":339},{"href":336,"rel":337},"https://fs.blog/chestertons-fence/",[338],"nofollow",[340],{"type":33,"value":341},"Chesterton’s Fence: A Lesson in Thinking",{"type":33,"value":343},". fs.blog.",{"type":28,"tag":79,"props":345,"children":346},{},[347,349,356],{"type":33,"value":348},"[Escaping Defects Rate]. ",{"type":28,"tag":66,"props":350,"children":353},{"href":351,"rel":352},"https://stackify.com/measure-defect-escape-rate/",[338],[354],{"type":33,"value":355},"How to Measure Defect Escape Rate to Keep Bugs Out of Production",{"type":33,"value":357},". Stackify.",{"type":28,"tag":79,"props":359,"children":360},{},[361,363,370],{"type":33,"value":362},"[PractiTest]. ",{"type":28,"tag":66,"props":364,"children":367},{"href":365,"rel":366},"https://www.practitest.com/resource-center/ebook/qa-manager-power-play/?utm_medium=email&utm_source=stw&utm_campaign=ebook&utm_content=july24",[338],[368],{"type":33,"value":369},"13 KPIs to Impress Leadership & Drive Business Value",{"type":33,"value":371},". PractiTest.",{"title":7,"searchDepth":373,"depth":373,"links":374},2,[375,379,380,386,391],{"id":37,"depth":373,"text":8,"children":376},[377],{"id":102,"depth":378,"text":105},3,{"id":118,"depth":373,"text":121},{"id":134,"depth":373,"text":137,"children":381},[382,383,384,385],{"id":145,"depth":378,"text":148},{"id":192,"depth":378,"text":195},{"id":211,"depth":378,"text":214},{"id":230,"depth":378,"text":233},{"id":249,"depth":373,"text":252,"children":387},[388,389,390],{"id":260,"depth":378,"text":263},{"id":279,"depth":378,"text":282},{"id":298,"depth":378,"text":301},{"id":322,"depth":373,"text":325},"markdown","content:blog:what-are-software-regressions.md","content","blog/what-are-software-regressions.md","md",1721767228250]