[{"data":1,"prerenderedAt":181},["ShallowReactive",2],{"blog-post-/blog/release-features-without-burning-customers":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"subtitle":9,"breadcrumbs":10,"link":15,"created":16,"shortDescription":22,"body":23,"_type":176,"_id":177,"_source":178,"_file":179,"_extension":180},"/blog/release-features-without-burning-customers","blog",false,"","Release features without burning customers","Insights for implementing QA in your startup.",[11,14],{"name":12,"path":13},"Blog","/blog/",{"name":8,"path":15},"/blog/release-features-without-burning-customers/",{"string":17,"valueOf":18,"month":19,"day":20,"year":21},"September 10, 2024",1725948000000,"Sep",10,2024,"Explore methods to incorporate QA into your startup's workflow. Safeguard customer loyalty by releasing features thoughtfully and avoiding frustrating experiences.",{"type":24,"children":25,"toc":166},"root",[26,35,41,50,55,61,66,72,77,123,130,135,140,145,150,156,161],{"type":27,"tag":28,"props":29,"children":31},"element","h2",{"id":30},"what-its-like-having-your-workflow-destroyed",[32],{"type":33,"value":34},"text","What it's like having your workflow destroyed",{"type":27,"tag":36,"props":37,"children":38},"p",{},[39],{"type":33,"value":40},"We’ve all been here: it’s Monday morning, you’re excited to start diving into your workload (that’s piled up from some weekend warriors) and you open up one of your favorite tools for getting the job done. You’ve probably spent about an hour, nearing the end of your first major task of the day and then BAM. That one feature you need to finish up this task is broken. To make matters worse, the workaround you’ve been using seems to have disappeared.",{"type":27,"tag":36,"props":42,"children":43},{},[44],{"type":27,"tag":45,"props":46,"children":49},"img",{"alt":47,"src":48},"Image of your customers watching their software break","/img/blog/release-features-without-burning-customers/computer_burning.jpg",[],{"type":27,"tag":36,"props":51,"children":52},{},[53],{"type":33,"value":54},"Now, this kind of story is the beginning of a nightmare for any startup founder. Imagine now this kind of problem is multiplied by thousands of users, then what? You’re going to have endless support requests coming in, angry customers, and some may even start asking themselves if there’s a competing product they can use. This kind of problem sucks to have, especially since the best startups have products their customers love to gush about during happy hour.",{"type":27,"tag":28,"props":56,"children":58},{"id":57},"why-keeping-your-customers-happy-is-hard",[59],{"type":33,"value":60},"Why keeping your customers happy is hard",{"type":27,"tag":36,"props":62,"children":63},{},[64],{"type":33,"value":65},"Avoiding this kind of situation is challenging because of the conflicting constraints in the startup life. Right? You’ve got a laundry list of features you’d like to have released yesterday and customers just keep wanting more. They’re sending you money, checks are flowing, but disasters like above are not what you want weighing down your company. The last thing on your mind is probably worrying about QA and getting muddied with too much process. On the other hand, you don’t want to be the next CrowdStrike, crashing millions of computers, shutting down flights, and breaking healthcare systems.",{"type":27,"tag":28,"props":67,"children":69},{"id":68},"how-to-get-started-with-agile-qa-in-your-startup",[70],{"type":33,"value":71},"How to get started with agile QA in your startup",{"type":27,"tag":36,"props":73,"children":74},{},[75],{"type":33,"value":76},"So what do you do? Well, unfortunately, QA has gotten a bad name for itself because of previous waterfall management styles. It’s 2024 and everyone’s agile, so how do you make QA agile? Here’s a breakdown of how you can get started:",{"type":27,"tag":78,"props":79,"children":80},"ul",{},[81,93,103,113],{"type":27,"tag":82,"props":83,"children":84},"li",{},[85,91],{"type":27,"tag":86,"props":87,"children":88},"strong",{},[89],{"type":33,"value":90},"Adding QA to your ideation and design process",{"type":33,"value":92},": Having someone QA your product designs, or even bouncing your ideas off of before handing it over to your designers or developers can significantly accelerate your product release velocity. This is because having someone with this adversarial mindset of looking for problems before they are implemented is extremely important.",{"type":27,"tag":82,"props":94,"children":95},{},[96,101],{"type":27,"tag":86,"props":97,"children":98},{},[99],{"type":33,"value":100},"Make sure you have the right QA person on your team",{"type":33,"value":102},": Now, effective and constructive criticism is a delicate process. You probably want to make sure you are working with someone who’s interested in building up your vision, and is not acting as a drag. It’s easy to find a critic for any solution, but finding the right person who can ask hard questions and inspire you to find their solutions to the most critical workflows is extremely important.",{"type":27,"tag":82,"props":104,"children":105},{},[106,111],{"type":27,"tag":86,"props":107,"children":108},{},[109],{"type":33,"value":110},"Understand when it's time to use manual QA and test automation",{"type":33,"value":112},": This is a hard question to answer in general because it's largely dependent on your vertical and what kind of product you’re building. For example, if you’re building a product as a market research aid and haven’t even found product market fit, it’s probably a bad idea to start implementing test automation. An easy way to figure out when it’s time to start testing is when you start noticing your developers spending a lot of time fixing bugs, or if bugs keep reappearing.",{"type":27,"tag":82,"props":114,"children":115},{},[116,121],{"type":27,"tag":86,"props":117,"children":118},{},[119],{"type":33,"value":120},"Add QA where it improves velocity",{"type":33,"value":122},": The main point you should be considering is when and where having QA will increase your product release velocity. For any startup velocity impacts how quickly you find product-market fit and how quickly you can fulfill customer requirements. It’s easy to accidentally overlook QA until you’ve hit a significant bump in the road because of being so focused on your initial velocity. The main pitfall is having your velocity slow to a crawl once you’re spending time fighting regressions and squashing bugs. Also, if your customers are angry because new releases keep breaking features they use, they may start looking for another company to work with.",{"type":27,"tag":124,"props":125,"children":127},"h3",{"id":126},"how-to-structure-your-test-automation-workflow",[128],{"type":33,"value":129},"How to structure your test automation workflow",{"type":27,"tag":36,"props":131,"children":132},{},[133],{"type":33,"value":134},"Once you start integrating automated testing into your SDLC, it’s essential to get this process right. Many companies make the mistake of either spending time testing near the end of their feature release, or just offloading that work onto their developers. Both of these strategies are critical errors because you end up losing a ton of time.",{"type":27,"tag":36,"props":136,"children":137},{},[138],{"type":33,"value":139},"For the first case, you can always have your testers working in tandem with your developers. What they need from your team is the requirements developers are implementing, and the ability to collaborate with developers while they implement test code. It's imperative this machine is set up correctly, but once you have this synergy, your developers will be handing off their code with plenty of test coverage. Additionally, any challenging technical conversations between developers and testers will be much easier to have at this point because the knowledge of their current project is in their head. It’s always challenging to dive into the nitty gritty technical details months after implementing them. For all you know, your developers could be working on something different and have already forgotten many decisions and details.",{"type":27,"tag":36,"props":141,"children":142},{},[143],{"type":33,"value":144},"In the other case, having developers implement tests after writing up features can be a serious drag on their productivity. This is because many are under the expectations of releasing features yesterday, so it’s easy to skimp on implementing the correct amount of tests. Also, the context switching can hurt performance as well. Your developers should be laser focused on releasing features, not switching between writing features and then battle testing them. That gets exhausting and slows down product velocity. Instead, you can have explicit QA team members go ahead and write tests while developers are implementing features.",{"type":27,"tag":36,"props":146,"children":147},{},[148],{"type":33,"value":149},"When you’re at the beginning of this part of the release cycle, you’ve already got the designs and the specs, it’s not hard for your QA to give your devs some pointers on what they need. Like the specific metadata the devs should integrate into their React components. There’s not a whole lot preventing testers from doing their job in tandem to developers, so why not let them.",{"type":27,"tag":28,"props":151,"children":153},{"id":152},"how-qacomet-helps-you-get-started-with-agile-qa",[154],{"type":33,"value":155},"How QAComet helps you get started with agile QA",{"type":27,"tag":36,"props":157,"children":158},{},[159],{"type":33,"value":160},"The other headache then is QA is just another part of the product dev process you have to manage. But that’s why you outsource to someone like QAComet, and let them integrate with your team. They have the expertise in making sure your product is up to snuff. Also, they will know how to properly set up your test automation suite so your developers can release features without getting annoyed by flaky tests. If your developers are tired, and mentally are finished after implementing a feature, how much bandwidth do you think they will have to write a test that doesn’t flake out in your CI system? It’s always a bummer to think you’re finished with a feature, only to find out there’s some nasty bugs sitting inside, frustrating customers. Then you have to go back, fight fires, and deal with any of the fallout.",{"type":27,"tag":36,"props":162,"children":163},{},[164],{"type":33,"value":165},"Instead of dealing with that tedium you can funnel out this work to a service that lets you focus your attention back to what matters the most, building products people love. Having an expert manage this part of the product development process lets you and your team recover some mental bandwidth and invest it in other areas. Also, having a top-tier product release process helps keep morale high. It’s more fun to tell your friends about the new features your team got to release this week than it is to share some of the battle stories about how they spent hours putting out fires.",{"title":7,"searchDepth":167,"depth":167,"links":168},2,[169,170,171,175],{"id":30,"depth":167,"text":34},{"id":57,"depth":167,"text":60},{"id":68,"depth":167,"text":71,"children":172},[173],{"id":126,"depth":174,"text":129},3,{"id":152,"depth":167,"text":155},"markdown","content:blog:release-features-without-burning-customers.md","content","blog/release-features-without-burning-customers.md","md",1728278818469]